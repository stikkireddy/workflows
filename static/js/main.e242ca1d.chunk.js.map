{"version":3,"sources":["CustomNode/index.tsx","index.tsx"],"names":["initialElements","id","data","label","position","x","y","source","target","UpdateNode","useState","elements","setElements","nodeName","setNodeName","nodeBg","setNodeBg","nodeHidden","setNodeHidden","useEffect","els","map","el","style","backgroundColor","isHidden","defaultZoom","minZoom","maxZoom","className","value","onChange","evt","type","checked","routes","path","component","CustomNode","Header","withRouter","history","location","href","defaultValue","pathname","event","push","route","substr","length","ReactDOM","render","basename","process","exact","document","getElementById","console","log"],"mappings":"yOAKMA,EAA4B,CAC9B,CAAEC,GAAI,IAAKC,KAAM,CAAEC,MAAO,KAAOC,SAAU,CAAEC,EAAG,IAAKC,EAAG,MACxD,CAAEL,GAAI,IAAKC,KAAM,CAAEC,MAAO,UAAYC,SAAU,CAAEC,EAAG,IAAKC,EAAG,MAC7D,CAAEL,GAAI,OAAQM,OAAQ,IAAKC,OAAQ,MAqExBC,EAlEI,WAAO,IAAD,EACWC,mBAAmBV,GAD9B,mBACdW,EADc,KACJC,EADI,OAEWF,mBAAiB,UAF5B,mBAEdG,EAFc,KAEJC,EAFI,OAGOJ,mBAAiB,QAHxB,mBAGdK,EAHc,KAGNC,EAHM,OAIeN,oBAAkB,GAJjC,mBAIdO,EAJc,KAIFC,EAJE,KAgDrB,OA1CAC,qBAAU,WACNP,GAAY,SAACQ,GAAD,OACRA,EAAIC,KAAI,SAACC,GASL,MARc,MAAVA,EAAGrB,KAEHqB,EAAGpB,KAAH,2BACOoB,EAAGpB,MADV,IAEIC,MAAOU,KAIRS,UAGhB,CAACT,EAAUD,IAEdO,qBAAU,WACNP,GAAY,SAACQ,GAAD,OACRA,EAAIC,KAAI,SAACC,GAML,MALc,MAAVA,EAAGrB,KAEHqB,EAAGC,MAAH,2BAAgBD,EAAGC,OAAnB,IAA0BC,gBAAiBT,KAGxCO,UAGhB,CAACP,EAAQH,IAEZO,qBAAU,WACNP,GAAY,SAACQ,GAAD,OACRA,EAAIC,KAAI,SAACC,GAML,MALc,MAAVA,EAAGrB,IAAwB,SAAVqB,EAAGrB,KAEpBqB,EAAGG,SAAWR,GAGXK,UAGhB,CAACL,EAAYL,IAGZ,cAAC,IAAD,CAAWD,SAAUA,EAAUe,YAAa,IAAKC,QAAS,GAAKC,QAAS,EAAxE,SACI,sBAAKC,UAAU,uBAAf,UACI,2CACA,uBAAOC,MAAOjB,EAAUkB,SAAU,SAACC,GAAD,OAASlB,EAAYkB,EAAIxB,OAAOsB,UAElE,uBAAOD,UAAU,sBAAjB,yBACA,uBAAOC,MAAOf,EAAQgB,SAAU,SAACC,GAAD,OAAShB,EAAUgB,EAAIxB,OAAOsB,UAE9D,sBAAKD,UAAU,8BAAf,UACI,4CACA,uBAAOI,KAAK,WAAWC,QAASjB,EAAYc,SAAU,SAACC,GAAD,OAASd,EAAcc,EAAIxB,OAAO0B,qBC7DtGC,G,MAAS,CACX,CACIC,KAAM,GACNC,UAAWC,GAEf,CACIF,KAAM,cACNC,UAAWC,KAIbC,EAASC,aAAW,YAA4B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAGlC,OACI,mCACI,mBAAGb,UAAU,OAAOc,KAAK,qCAAzB,4BAGA,wBAAQC,aAAcF,EAASG,SAAUd,SAPhC,SAACe,GAAD,OAA2CL,EAAQM,KAAKD,EAAMtC,OAAOsB,QAO9E,SACKK,EAAOd,KAAI,SAAC2B,GAAD,OACR,wBAAQlB,MAAOkB,EAAMZ,KAArB,SACoB,KAAfY,EAAMZ,KAAc,UAAYY,EAAMZ,KAAKa,OAAO,EAAGD,EAAMZ,KAAKc,SADrCF,EAAMZ,iBAS1De,IAASC,OACL,eAAC,IAAD,CAAQC,SAAUC,aAAlB,UACI,cAACf,EAAD,IACA,cAAC,IAAD,UACKJ,EAAOd,KAAI,SAAC2B,GAAD,OACR,cAAC,IAAD,CAAOO,OAAK,EAACnB,KAAMY,EAAMZ,KAAMgB,OAAQ,kBAAM,cAACJ,EAAMX,UAAP,MAA0BW,EAAMZ,cAIzFoB,SAASC,eAAe,SAG5BC,QAAQC,IAAI,0BAA2BL,gB","file":"static/js/main.e242ca1d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactFlow, { Elements } from 'react-flow-renderer';\n\nimport './updatenode.css';\n\nconst initialElements: Elements = [\n    { id: '1', data: { label: '-' }, position: { x: 100, y: 100 } },\n    { id: '2', data: { label: 'Node 2' }, position: { x: 100, y: 200 } },\n    { id: 'e1-2', source: '1', target: '2' },\n];\n\nconst UpdateNode = () => {\n    const [elements, setElements] = useState<Elements>(initialElements);\n    const [nodeName, setNodeName] = useState<string>('Node 1');\n    const [nodeBg, setNodeBg] = useState<string>('#eee');\n    const [nodeHidden, setNodeHidden] = useState<boolean>(false);\n\n    useEffect(() => {\n        setElements((els) =>\n            els.map((el) => {\n                if (el.id === '1') {\n                    // it's important that you create a new object here in order to notify react flow about the change\n                    el.data = {\n                        ...el.data,\n                        label: nodeName,\n                    };\n                }\n\n                return el;\n            })\n        );\n    }, [nodeName, setElements]);\n\n    useEffect(() => {\n        setElements((els) =>\n            els.map((el) => {\n                if (el.id === '1') {\n                    // it's important that you create a new object here in order to notify react flow about the change\n                    el.style = { ...el.style, backgroundColor: nodeBg };\n                }\n\n                return el;\n            })\n        );\n    }, [nodeBg, setElements]);\n\n    useEffect(() => {\n        setElements((els) =>\n            els.map((el) => {\n                if (el.id === '1' || el.id === 'e1-2') {\n                    // when you update a simple type you can just update the value\n                    el.isHidden = nodeHidden;\n                }\n\n                return el;\n            })\n        );\n    }, [nodeHidden, setElements]);\n\n    return (\n        <ReactFlow elements={elements} defaultZoom={1.5} minZoom={0.2} maxZoom={4}>\n            <div className=\"updatenode__controls\">\n                <label>label:</label>\n                <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\n\n                <label className=\"updatenode__bglabel\">background:</label>\n                <input value={nodeBg} onChange={(evt) => setNodeBg(evt.target.value)} />\n\n                <div className=\"updatenode__checkboxwrapper\">\n                    <label>hidden:</label>\n                    <input type=\"checkbox\" checked={nodeHidden} onChange={(evt) => setNodeHidden(evt.target.checked)} />\n                </div>\n            </div>\n        </ReactFlow>\n    );\n};\n\nexport default UpdateNode;\n\n","import React, { ChangeEvent } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route, Switch, withRouter } from 'react-router-dom';\n\nimport CustomNode from './CustomNode';\n\n\nimport './index.css';\n\nconst routes = [\n    {\n        path: '',\n        component: CustomNode,\n    },\n    {\n        path: 'custom-node',\n        component: CustomNode,\n    },\n];\n\nconst Header = withRouter(({ history, location }) => {\n    const onChange = (event: ChangeEvent<HTMLSelectElement>) => history.push(event.target.value);\n\n    return (\n        <header>\n            <a className=\"logo\" href=\"https://github.com/wbkd/react-flow\">\n                React Flow Dev\n            </a>\n            <select defaultValue={location.pathname} onChange={onChange}>\n                {routes.map((route) => (\n                    <option value={route.path} key={route.path}>\n                        {route.path === '' ? 'default' : route.path.substr(0, route.path.length)}\n                    </option>\n                ))}\n            </select>\n        </header>\n    );\n});\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n        <Header />\n        <Switch>\n            {routes.map((route) => (\n                <Route exact path={route.path} render={() => <route.component />} key={route.path} />\n            ))}\n        </Switch>\n    </Router>,\n    document.getElementById('root')\n);\n\nconsole.log(\"This is the process.env\", process.env.PUBLIC_URL)"],"sourceRoot":""}